#!/bin/bash
source /home/youssef/oncf/codes.sh


if [[ "$1" == "--stations" || "$1" == "-s" ]]; then
  s="-----------------------------------\n"
  s+="|         Station Names           |\n"
  s+="-----------------------------------\n"
  while read -r station; do
    s+=$(printf "| %-31s |" "$station")
    s+="\n"
  done < <(cat codes.sh | tr '=' ' ' | awk '{print $1}' | sort)
  s+="-----------------------------------"
  echo -e "$s" | less
  exit 0
fi

if [[ "$1" == "--help" || "$1" == "-h" || $# -lt 2 ]]; then
  echo -e "Usage:\n\t$0 <from_station> <to_station> [--date <date>] [--student <code>]"
  echo -e "\nOptions:"
  echo -e "\t--date <date>\t\tSpecify the date in dd-mm-yyyy format."
  echo -e "\t--student <code>\tSpecify the student code."
  echo -e "\t--stations | -s\t\tList all available stations."
  echo -e "\t--help | -h\t\tDisplay this help message."

  exit 0
fi

from_var="$1"
to_var="$2"

date="null"
code="null"
type="null"

shift 2
while [[ $# -gt 0 ]]; do
  case "$1" in
    --date)
      date="$2"
      shift 2
      ;;
    --student)
      code="\"$2\""
      type="\"ET\""
      shift 2
      ;;
    *)
      echo "Unknown option: $1"
      exit 1
      ;;
  esac
done

if [[ -z "$from_var" || -z "$to_var" ]]; then
  echo "Usage: $0 <from_station> <to_station> [--date <date>] [--student <code>]"
  exit 1
fi

from=$(eval echo "\$$from_var")
to=$(eval echo "\$$to_var")

if [[ -z "$from" || -z "$to" ]]; then
  echo "Invalid station codes. Please provide valid station names as arguments."
  exit 1
fi

if [[ "$date" != "null" ]]; then
  start_date=$(date -u -d "$(echo "$date" | sed 's/\([0-9]\{2\}\)\-\([0-9]\{2\}\)\-\([0-9]\{4\}\)/\3-\2-\1/')" +"%Y-%m-%dT00:01:01+00:00") || { echo "Invalid date format"; exit 1; }
else
  start_date=$(date -u +"%Y-%m-%dT00:01:01+00:00")
fi

current_date="$start_date"
output_file="output.json"
> "$output_file"
> .row_output.json

echo "Searching for tickets with a good price ..."

while [[ true ]]; do
  date="$current_date"

  if [[ "$code" == "null" ]]; then
    body="{\"codeGareDepart\":\"$from\",\"codeGareArrivee\":\"$to\",\"codeNiveauConfort\":2,\"dateDepartAller\":\"$date\",\"dateDepartAllerMax\":null,\"dateDepartRetour\":null,\"dateDepartRetourMax\":null,\"isTrainDirect\":null,\"isPreviousTrainAller\":null,\"isTarifReduit\":true,\"adulte\":1,\"kids\":0,\"listVoyageur\":[{\"numeroClient\":null,\"codeTarif\":null,\"codeProfilDemographique\":\"3\",\"dateNaissance\":null}],\"booking\":false,\"isEntreprise\":false,\"token\":\"\",\"numeroContract\":\"\",\"codeTiers\":\"\"}"
  else
    body="{\"codeGareDepart\":\"$from\",\"codeGareArrivee\":\"$to\",\"codeNiveauConfort\":2,\"dateDepartAller\":\"$date\",\"dateDepartAllerMax\":null,\"dateDepartRetour\":null,\"dateDepartRetourMax\":null,\"isTrainDirect\":null,\"isPreviousTrainAller\":null,\"isTarifReduit\":true,\"adulte\":1,\"kids\":0,\"listVoyageur\":[{\"numeroClient\":$code,\"codeTarif\":$type,\"codeProfilDemographique\":\"2\",\"dateNaissance\":null}],\"booking\":true,\"isEntreprise\":false,\"token\":\"\",\"numeroContract\":\"\",\"codeTiers\":\"\"}"
  fi

  curl -s 'https://www.oncf-voyages.ma/api/availability' \
    -X POST \
    -H 'Content-Type: application/json' \
    -H 'User-Agent: Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36' \
    --data-raw $body \
    -o .row_output.json


  res_code=$(jq -r '.head.errorCode // empty' .row_output.json)
  if [[ "$res_code" != "0" ]]; then
    error_message=$(jq -r '.head.errorMessage // empty' .row_output.json)
    echo "Error: $error_message"
    exit 1
  fi

  last_departure_datetime=$(jq -r '.body.departurePath[-1].listSegments[0].dateHeureDepart' .row_output.json)
  if [[ "$last_departure_datetime" != "null" ]]; then
    if [[ "$last_departure_datetime" == "$current_date" ]]; then
      break
    fi
    current_date="$last_departure_datetime"
  else
    current_date=$(date -u -d "$current_date + 12 hours" +"%Y-%m-%dT%H:%M:%S+00:00")
  fi

  jq -c '.body.departurePath[] | {from: .listSegments[0].codeGareDepart, to: .listSegments[0].codeGareArrivee, departure_datetime: .listSegments[0].dateHeureDepart, arrival_datetime: .listSegments[0].dateHeureArrivee, price: .listPrixFlexibilite[].prixFlexibilite[0].prix}' .row_output.json >> "$output_file"
done

declare -A lowest_prices
declare -A arrival_times

echo -e "-----------------------------------------------"
echo -e "|    DEPARTURE TIME    | ARRIVAL TIME | PRICE |"
echo -e "-----------------------------------------------"

while IFS= read -r line; do
  departure_datetime=$(echo "$line" | jq -r '.departure_datetime')
  arrival_datetime=$(echo "$line" | jq -r '.arrival_datetime')
  price=$(echo "$line" | jq -r '.price')
  
  if [[ -z "${lowest_prices[$departure_datetime]}" || "${lowest_prices[$departure_datetime]}" -gt "$price" ]]; then
    lowest_prices[$departure_datetime]=$price
    arrival_times[$departure_datetime]=$arrival_datetime
  fi
done < "$output_file"

for datetime in $(printf "%s\n" "${!lowest_prices[@]}" | sort); do
  formatted_departure_date=$(date -u -d "$datetime" +"%d/%m/%Y %I:%M %p")
  formatted_arrival_date=$(date -u -d "${arrival_times[$datetime]}" +"%I:%M %p")
  price=${lowest_prices[$datetime]}
  
  printf "| %-20s | %-12s | %-5s |\n" "$formatted_departure_date" "$formatted_arrival_date" "$price"
done

echo -e "-----------------------------------------------"


